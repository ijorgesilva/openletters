"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.onRouteUpdate = exports.onClientEntry = void 0;

var _reactGa = _interopRequireDefault(require("react-ga"));

var _universalCookie = _interopRequireDefault(require("universal-cookie"));

var _merge = _interopRequireDefault(require("lodash/merge"));

var _defaultOptions = _interopRequireDefault(require("./default-options"));

var _validTrackingId = require("./valid-tracking-id");

var cookies = new _universalCookie.default();
var currentEnvironment = process.env.ENV || process.env.NODE_ENV || "development";

var isEnvironmentValid = function isEnvironmentValid(environments) {
  return environments.includes(currentEnvironment);
}; // init


var onClientEntry = function onClientEntry(_, pluginOptions) {
  if (pluginOptions === void 0) {
    pluginOptions = {};
  }

  var options = (0, _merge.default)(_defaultOptions.default, pluginOptions);

  if (isEnvironmentValid(options.environments)) {
    // google analytics
    if (cookies.get(options.googleAnalytics.cookieName) === "true" && (0, _validTrackingId.validGATrackingId)(options)) {
      _reactGa.default.initialize(options.googleAnalytics.trackingId);
    } // facebook pixel


    if (cookies.get(options.facebookPixel.cookieName) === "true" && (0, _validTrackingId.validFbPixelId)(options) && typeof window.fbq === "function") {
      window.fbq("init", options.facebookPixel.pixelId);
    }
  }
}; // track


exports.onClientEntry = onClientEntry;

var onRouteUpdate = function onRouteUpdate(_ref, pluginOptions) {
  var location = _ref.location;

  if (pluginOptions === void 0) {
    pluginOptions = {};
  }

  var options = (0, _merge.default)(_defaultOptions.default, pluginOptions);

  if (isEnvironmentValid(options.environments)) {
    // google analytics
    if (cookies.get(options.googleAnalytics.cookieName) === "true" && (0, _validTrackingId.validGATrackingId)(options) && _reactGa.default.ga) {
      var gaAnonymize = options.googleAnalytics.anonymize;
      gaAnonymize = gaAnonymize !== undefined ? gaAnonymize : true;

      _reactGa.default.set({
        page: location.pathname,
        anonymizeIp: gaAnonymize
      });

      _reactGa.default.pageview(location.pathname);
    } // google tag manager


    if (cookies.get(options.googleTagManager.cookieName) === "true" && (0, _validTrackingId.validGTMTrackingId)(options)) {
      setTimeout(function () {
        var data = options.googleTagManager.dataLayerName ? window[options.googleTagManager.dataLayerName] : window.dataLayer;

        if (typeof data === "object") {
          data.push({
            event: "gatsbyRouteChange"
          });
        }
      }, 50);
    } // facebook pixel


    if (cookies.get(options.facebookPixel.cookieName) === "true" && (0, _validTrackingId.validFbPixelId)(options) && typeof window.fbq === "function") {
      window.fbq("track", "PageView");
    }
  }
};

exports.onRouteUpdate = onRouteUpdate;