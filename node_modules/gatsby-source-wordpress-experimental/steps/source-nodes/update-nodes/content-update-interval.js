"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.startPollingForContentUpdates = void 0;

var _fetchNodeUpdates = _interopRequireDefault(require("./fetch-node-updates"));

var _formatLogMessage = require("../../../utils/format-log-message");

var _store = _interopRequireDefault(require("../../../store"));

const refetcher = async (msRefetchInterval, helpers, {
  reconnectionActivity = null,
  retryCount = 0
} = {}) => {
  try {
    await (0, _fetchNodeUpdates.default)({
      intervalRefetching: true,
      throwFetchErrors: true,
      throwGqlErrors: true
    });

    if (reconnectionActivity) {
      reconnectionActivity.end();
      helpers.reporter.success((0, _formatLogMessage.formatLogMessage)(`Content updates re-connected after ${retryCount} tries`));
      reconnectionActivity = null;
      retryCount = 0;
    }
  } catch (e) {
    if (!reconnectionActivity) {
      reconnectionActivity = helpers.reporter.activityTimer((0, _formatLogMessage.formatLogMessage)(`Content update error: "${e.message}"`));
      reconnectionActivity.start();
      reconnectionActivity.setStatus(`retrying...`);
    } else {
      retryCount++;
      reconnectionActivity.setStatus(`retried ${retryCount} times`);
    }

    await new Promise(resolve => setTimeout(resolve, 30000));
  }

  setTimeout(() => refetcher(msRefetchInterval, helpers, {
    reconnectionActivity,
    retryCount
  }), msRefetchInterval);
};
/**
 * Starts constantly refetching the latest WordPress changes
 * so we can update Gatsby nodes when data changes
 */


const startPollingForContentUpdates = (helpers, pluginOptions) => {
  if (process.env.WP_DISABLE_POLLING) {
    return;
  }

  const {
    verbose
  } = _store.default.getState().gatsbyApi.pluginOptions;

  const msRefetchInterval = pluginOptions && pluginOptions.develop && pluginOptions.develop.nodeUpdateInterval ? pluginOptions.develop.nodeUpdateInterval : 300;

  if (verbose) {
    helpers.reporter.log(``);
    helpers.reporter.info((0, _formatLogMessage.formatLogMessage)`Watching for WordPress changes`);
  }

  refetcher(msRefetchInterval, helpers);
};

exports.startPollingForContentUpdates = startPollingForContentUpdates;