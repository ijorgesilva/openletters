
import { Link } from 'gatsby'
import React from 'react'
import { Nav, Navbar } from 'react-bootstrap'
import { useTranslation } from 'react-i18next'

import MenuPageItem from './menuPageItem'
import './menuPage.scss'

/*
    menu: 
        [
            {
                name: 'Link Name', 
                link: '/', 
                as: 'Link', 
                target: '_self',
            }
        ]
 */
export default function MenuPage ( 
    { 
        breadcrumbs,
        menuBrand, 
        menu, 
        className, 
        id, 
        mode,
        menues, 
        campus, 
        sticky,
        close,
    } 
){

    const { t } = useTranslation()

    let base = {}
    let items =     ( menues?.menuDetails?.menuPagesMenu?.menuPageMenuItems?.length > 0 ) ? 
                        menues.menuDetails.menuPagesMenu.menuPageMenuItems 
                    : 
                        undefined

    if (menuBrand) {
        base = menuBrand
    }
    else if( !menues?.menuDetails?.menuPagesMenu?.menuPagesMenuBase?.menuPagesMenuHideBase && 
              menues?.menuDetails?.menuPagesMenu?.menuPagesMenuBase ) {
        base = {
                'link': menues.menuDetails.menuPagesMenu?.menuPagesMenuBase.menuPagesMenuBaseUrl,
                'name': menues.menuDetails.menuPagesMenu?.menuPagesMenuBase.menuPagesMenuBaseTitle
            }
    }

    if( menues?.status === 'publish' ){
        return(
            <Navbar 
                id                  = { id }
                defaultActiveKey    = '0'
                className           = {`menuPage ${ mode ? mode : 'light' } ${ className ? className : '' } ${ sticky ? 'sticky' : ''}`} 
                bg                  = { mode ? mode : 'light' } 
                variant             = { mode ? mode : 'light' } 
            >

                {
                    ( !menues?.menuDetails?.menuPagesMenu?.menuPagesMenuBase?.menuPagesMenuHideBase && base ) ?
                        <Navbar.Brand>
                            <Link to={base.link} title={base.name}>
                                {base.name}
                            </Link>
                        </Navbar.Brand>
                    :
                        undefined
                }

                <Nav className='disable-scrollbars'>
                    {
                        items ?
                            items.map( ( _, index ) => (
                                <Nav.Item key={index} as='li'>
                                    <MenuPageItem 
                                        campus  = { campus }
                                        item    = { _ }
                                    />
                                </Nav.Item>
                            ))
                        :
                            undefined
                    }
                </Nav>

            </Navbar>
        )
    }

    /* JSON Page Menu for Autogenerated Pages */
    else if( menu ) { 
        return (
            <Navbar className={`menuPage ${ mode ? mode : 'light' } ${ className ? className : '' }`} bg = { mode } variant = { mode }>

                {
                    menuBrand ?
                        <Navbar.Brand>
                            <Link to={menuBrand.link} title={menuBrand.name}>
                                {menuBrand.name}
                            </Link>
                        </Navbar.Brand>
                    : undefined
                }

                <Nav className='disable-scrollbars'>
                    <Navbar 
                        className   = {`menuPage`} 
                        bg          = { mode ? mode : 'light' } 
                        variant     = { mode ? mode : 'light' } 
                    >
                        {
                            menu.map( (item, index) => (
                                <Nav.Item key={index} as='li'>
                                    {
                                        item.target ? 
                                            <Nav.Link 
                                                href        = {item.link} 
                                                className   = {`${item.className ? item.className : '' } ${ item.link === breadcrumbs?.current ? 'active' : ''}`}
                                                title       = {item.name} 
                                                target      = {item.target.split(':')[0]}
                                            >
                                                {item.name}
                                            </Nav.Link>
                                        :   
                                            <Link 
                                                to              = {item.link} 
                                                className       = {`nav-link ${ item.link === breadcrumbs?.current ? 'active' : ''}`}
                                                title           = {item.name} 
                                                activeClassName = 'active'
                                            >
                                                {item.name}
                                            </Link>  
                                    }
                                </Nav.Item>
                            ))
                        }
                    </Navbar>
                </Nav>

                {
                    close ? 
                        <div className={`pl-3 pr-3 z-index-3`}>
                            <Link to = {close} className={`close`} variant={`${ mode === 'light' ? 'black' : mode === 'dark' ? 'white' : mode }`} aria-label={t('global.close')}>
                                <span aria-hidden="true">âœ•</span>
                                <span className="sr-only">{t('global.close')} </span>
                            </Link>
                        </div>
                    :
                        undefined
                }

            </Navbar>
        )
    }
    else {
        return <></>
    }
}