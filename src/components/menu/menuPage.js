import { faTimes } from '@fortawesome/free-solid-svg-icons'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { Link } from 'gatsby'
import React from 'react'
import { Nav, Navbar } from 'react-bootstrap'
import { useTranslation } from 'react-i18next'

import MenuPageItem from './menuPageItem'
import './menuPage.scss'

export default function MenuPage ( 
    { 
        breadcrumbs,
        menuBrand, 
        menu, 
        className, 
        id, 
        mode,
        menus, 
        campus, 
        sticky,
        close,
    } 
){

    /* Structure:
        menu: 
            [
                {
                    name: 'Link Name', 
                    link: '/', 
                    as: 'Link', 
                    target: '_self',
                }
            ]
    */
    const { t } = useTranslation()

    let base = {}
    let items =     menus?.menuDetails?.menuPagesMenu?.menuPageMenuItems?.length > 0 ? 
                        menus.menuDetails.menuPagesMenu.menuPageMenuItems 
                    : 
                        undefined

    if (menuBrand) {
        base = menuBrand
    }
    else if( !menus?.menuDetails?.menuPagesMenu?.menuPagesMenuBase?.menuPagesMenuHideBase && menus?.menuDetails?.menuPagesMenu?.menuPagesMenuBase ) {
        base =  {
                    'link': menus.menuDetails.menuPagesMenu?.menuPagesMenuBase.menuPagesMenuBaseUrl,
                    'name': menus.menuDetails.menuPagesMenu?.menuPagesMenuBase.menuPagesMenuBaseTitle
                }
    }

    if( menus?.status === 'publish' ){
        return(
            <Navbar 
                id                  = { id }
                defaultActiveKey    = '0'
                className           = {`menuPage ${ mode ? mode : 'light' } ${ className ? className : '' } ${ sticky ? 'sticky' : ''}`} 
                bg                  = { mode ? mode : 'light' } 
                variant             = { mode ? mode : 'light' } 
            >

                {
                    ( !menus?.menuDetails?.menuPagesMenu?.menuPagesMenuBase?.menuPagesMenuHideBase && base ) ?
                        <Navbar.Brand>
                            <Link to={base.link} title={base.name}>
                                {base.name}
                            </Link>
                        </Navbar.Brand>
                    :
                        undefined
                }

                <Nav className='disable-scrollbars'>
                    {
                        items ?
                            items.map( ( _, index ) => (
                                <Nav.Item key={index} as='li'>
                                    <MenuPageItem 
                                        campus  = { campus }
                                        item    = { _ }
                                    />
                                </Nav.Item>
                            ))
                        :
                            undefined
                    }
                </Nav>

            </Navbar>
        )
    }

    /* JSON Page Menu for Autogenerated Pages */
    else if( menu ) { 
        return (
            <Navbar
                className = { `menuPage ${ mode ? mode : 'light' } ${ className ? className : '' }`} 
                bg = { mode } 
                variant = { mode }
            >

                {
                    menuBrand ?
                        <Navbar.Brand>
                            <Link className=' text-truncate' to={menuBrand.link} title={menuBrand.name}>
                                {menuBrand.name}
                            </Link>
                        </Navbar.Brand>
                    : undefined
                }

                <Nav className='disable-scrollbars'>
                    {
                        menu.map( (item, index) => (
                            <Nav.Item key={index} as='li'>
                                {
                                    item.target ? 
                                        <a 
                                            href        = {item.link} 
                                            className   = {`${ item.removeDefaultCss ? '' : 'nav-link'} ${item.className ? item.className : '' } ${ item.link === breadcrumbs?.current ? 'active' : ''}`}
                                            title       = {item.name} 
                                            target      = {item.target.split(':')[0]}
                                        >
                                            {item.name}
                                        </a>
                                    :   
                                        <Link 
                                            to              = {item.link} 
                                            className       = {`${ item.removeDefaultCss ? '' : 'nav-link'} ${ item.link === breadcrumbs?.current ? 'active' : ''}`}
                                            title           = {item.name} 
                                            activeClassName = 'active'
                                        > 
                                            {item.name}
                                        </Link>  
                                }
                            </Nav.Item>
                        ))
                    }
                </Nav>

                {
                    close ? 
                        <div className={`close`}>
                            <Link to = {close} aria-label={t('global.close')}>
                                <FontAwesomeIcon className='icon' icon={faTimes} size='sm'/>
                                <span className='sr-only'>{t('global.close')} </span>
                            </Link>
                        </div>
                    :
                        undefined
                }

            </Navbar>
        )
    }
    else {
        return <></>
    }
}